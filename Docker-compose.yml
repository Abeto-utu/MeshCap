version: '3'
services:
  web-app:
    container_name: aplicacion    
    build:
      context: ./src
      dockerfile: Dockerfile
    # Indica que se debe construir una imagen de Docker para este servicio utilizando el archivo Dockerfile en el directorio "./src".
    links:
      - database
    # Establece una conexión de red entre este contenedor y el contenedor llamado "database". 
    # Esto permite que "web-app" se comunique con la base de datos utilizando el nombre de host "database".
    ports:
      - "8080:80"
    # Mapea el puerto 8080 del host al puerto 80 del contenedor, lo que significa que puedes acceder a la aplicación web en el puerto 8080 del host.
    environment:
      - MYSQL_PORT=3306
      - MYSQL_HOST=database
      - MYSQL_DATABASE=meshcap
    # Define variables de entorno que se utilizarán en el contenedor "web-app". 
    # Estas variables incluyen la configuración de la base de datos, como el puerto, el nombre de host y el nombre de la base de datos.

  database:
    container_name: base-de-datos
    build:
      context: ./mysql
      dockerfile: Dockerfile
    # Indica que se debe construir una imagen de Docker para este servicio utilizando el archivo Dockerfile en el directorio "./mysql".
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=meshcap
    # Define variables de entorno para la configuración de la base de datos MySQL, como la contraseña de root y el nombre de la base de datos.
    volumes:
      - ./mysql/initdb:/docker-entrypoint-initdb.d
    # Mapea el directorio local "./mysql/initdb" al directorio "/docker-entrypoint-initdb.d" dentro del contenedor. 
    # Esto se utiliza para  proporcionar scripts de inicialización de la base de datos al contenedor MySQL.
    restart: always
    # Configura el reinicio automático del contenedor